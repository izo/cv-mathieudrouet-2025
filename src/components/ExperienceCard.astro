---
export interface Props {
  company: string;
  companyUrl?: string;
  role: string;
  period: string;
  current?: boolean;
  logo?: string;
  description?: string[];
  icon?: string;
  levelIcon?: string;
}

const { company, companyUrl, role, period, current = false, logo, description, icon, levelIcon } = Astro.props;

// Generate initials as fallback for missing logos
const getInitials = (name: string) => {
  return name.split(' ').map(word => word.charAt(0)).join('').toUpperCase().slice(0, 2);
};

// Get icon SVG from Iconify API
const getIconifySVG = async (iconName: string) => {
  try {
    const response = await fetch(`https://api.iconify.design/${iconName}.svg?color=%23d6e0e2&width=60%25&height=60%25`);
    return await response.text();
  } catch {
    return null;
  }
};

// Get level icon SVG from Iconify API (24x24 size, white color)
const getLevelIconSVG = async (iconName: string) => {
  try {
    const response = await fetch(`https://api.iconify.design/${iconName}.svg?color=white&width=24&height=24`);
    return await response.text();
  } catch {
    return null;
  }
};

// Get icons for component
const iconSVG = icon ? await getIconifySVG(icon) : null;
const levelIconSVG = levelIcon ? await getLevelIconSVG(levelIcon) : null;
---

<div class="glass-card mb-4 sm:mb-6 lg:mb-section">
  <div class="flex flex-col sm:grid sm:grid-cols-[3rem_1fr] lg:grid-cols-[4rem_1fr] gap-4 sm:gap-6">
    <!-- Logo Column -->
    <div class="w-12 h-12 sm:w-12 sm:h-12 lg:w-16 lg:h-16 flex items-center justify-center flex-shrink-0 mx-auto sm:mx-0 order-1 sm:order-none">
      {logo ? (
        <img 
          src={logo} 
          alt={`Logo de ${company}`} 
          class="w-full h-full object-contain lazy-load"
          loading="lazy"
          decoding="async"
          fetchpriority="low"
          width="64"
          height="64"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'"
        />
      ) : null}
      <div 
        class={`w-full h-full bg-cv-accent text-white flex items-center justify-center text-sm font-semibold ${logo ? 'hidden' : 'flex'}`}
        aria-label={icon ? `Icône de ${company}` : `Initiales de ${company}`}
      >
        {icon && iconSVG ? (
          <div class="flex items-center justify-center w-full h-full" set:html={iconSVG} />
        ) : (
          getInitials(company)
        )}
      </div>
    </div>
    
    <!-- Content Column -->
    <div class="order-2 sm:order-none">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-3 sm:mb-4 text-center sm:text-left">
        <div class="mb-2 sm:mb-0">
          <h3 class="text-lg sm:text-xl lg:text-company text-cv-content font-semibold font-lora">
            {companyUrl ? (
              <a 
                href={companyUrl} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="hover:text-cv-accent transition-colors hover:underline focus:outline-none focus:ring-2 focus:ring-cv-accent focus:rounded"
                aria-label={`Voir le projet chez ${company} (ouvre dans un nouvel onglet)`}
              >
                <span set:html={company}></span>
              </a>
            ) : (
              <span set:html={company}></span>
            )}
          </h3>
          <p class="text-base sm:text-lg lg:text-role text-cv-muted" set:html={role}></p>
        </div>
        
        <!-- Level Badge -->
        <div class="flex justify-center sm:justify-end">
          <span class="inline-flex items-center gap-1.5 px-2 py-1 sm:px-3 sm:py-1 text-xs sm:text-sm text-white border shadow-sm font-medium" style="background-color: #98b6b0; border-color: #98b6b0;">
            {levelIcon && levelIconSVG ? (
              <div class="flex items-center justify-center w-6 h-6" set:html={levelIconSVG} />
            ) : null}
            <span class="font-ibm-plex-mono" set:html={period}></span>
          </span>
        </div>
      </div>
      
      <!-- Content: either description array or slot -->
      {description && description.length > 0 ? (
        <ul class="space-y-2 sm:space-y-2 text-center sm:text-left">
          {description.map((item) => (
            <li class="text-sm sm:text-base lg:text-body text-cv-content flex flex-col sm:flex-row sm:items-start">
              <span class="mr-0 sm:mr-3 text-cv-accent hidden sm:inline">•</span>
              <span class="sm:flex-1">{item}</span>
            </li>
          ))}
        </ul>
      ) : (
        <ul class="space-y-2 sm:space-y-2 text-center sm:text-left">
          <slot />
        </ul>
      )}
    </div>
  </div>
</div>