---
// Theme Switcher Component
---

<div class="theme-switcher glass-card">
  <h3 class="text-sm font-medium text-cv-muted mb-3">Theme</h3>
  <div class="flex gap-2">
    <button 
      class="theme-btn active" 
      data-theme="liquid-glass"
      title="Liquid Glass - Design moderne avec effet verre"
    >
      <span class="theme-preview bg-gradient-to-r from-blue-100 to-blue-300"></span>
      <span class="theme-name">Glass</span>
    </button>
    
    <button 
      class="theme-btn" 
      data-theme="zed"
      title="Zed - Design minimal et tech moderne"
    >
      <span class="theme-preview bg-gradient-to-r from-slate-800 to-blue-600"></span>
      <span class="theme-name">Zed</span>
    </button>
  </div>
</div>

<style>
  .theme-switcher {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 1000;
    min-width: 200px;
  }
  
  .theme-btn {
    @apply flex items-center gap-2 p-2 rounded-lg transition-all;
    @apply bg-cv-section hover:bg-cv-glass border border-cv-border;
    @apply text-cv-content text-xs font-medium;
  }
  
  .theme-btn:hover {
    transform: translateY(-1px);
    @apply shadow-lg;
  }
  
  .theme-btn.active {
    @apply bg-cv-accent text-white;
    @apply ring-2 ring-cv-accent ring-opacity-50;
  }
  
  .theme-preview {
    @apply w-4 h-4 rounded-full;
  }
  
  .theme-name {
    @apply truncate;
  }
  
  /* Zed theme styles for switcher */
  [data-theme="zed"] .theme-switcher {
    background: var(--cv-card);
    border: 1px solid var(--cv-border);
    box-shadow: 0 4px 24px hsla(218, 13%, 6%, 0.3);
  }
  
  [data-theme="zed"] .theme-btn {
    border: 1px solid var(--cv-border);
    background: var(--cv-section);
    font-family: var(--font-family);
  }
  
  [data-theme="zed"] .theme-btn:hover {
    border-color: var(--cv-accent);
    box-shadow: 0 2px 8px hsla(218, 13%, 6%, 0.2);
  }
  
  [data-theme="zed"] .theme-btn.active {
    background: var(--cv-accent);
    border-color: var(--cv-accent);
    color: white;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .theme-switcher {
      top: 1rem;
      right: 1rem;
      min-width: 160px;
    }
    
    .theme-btn {
      @apply p-1.5;
    }
    
    .theme-name {
      @apply text-xs;
    }
  }
</style>

<script>
  // Theme management logic
  class ThemeManager {
    constructor() {
      this.currentTheme = this.getStoredTheme() || 'liquid-glass';
      this.init();
    }
    
    init() {
      // Apply stored theme on load
      this.applyTheme(this.currentTheme);
      
      // Setup button event listeners
      document.addEventListener('DOMContentLoaded', () => {
        const buttons = document.querySelectorAll('.theme-btn');
        buttons.forEach(btn => {
          btn.addEventListener('click', (e) => {
            const theme = e.currentTarget.dataset.theme;
            this.setTheme(theme);
          });
        });
        
        // Update active button
        this.updateActiveButton();
      });
    }
    
    setTheme(themeId) {
      this.currentTheme = themeId;
      this.applyTheme(themeId);
      this.storeTheme(themeId);
      this.updateActiveButton();
      
      // Optional: Analytics tracking
      if (typeof gtag !== 'undefined') {
        gtag('event', 'theme_change', {
          theme_name: themeId
        });
      }
    }
    
    applyTheme(themeId) {
      document.documentElement.setAttribute('data-theme', themeId);
      
      // Force font reload for brutalist themes
      if (themeId.startsWith('brutalist')) {
        this.loadBrutalistFonts();
      }
    }
    
    loadBrutalistFonts() {
      // Load JetBrains Mono if not already loaded
      if (!document.querySelector('link[href*="JetBrains+Mono"]')) {
        const link = document.createElement('link');
        link.href = 'https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap';
        link.rel = 'stylesheet';
        document.head.appendChild(link);
      }
    }
    
    getStoredTheme() {
      try {
        return localStorage.getItem('cv-theme');
      } catch (e) {
        return null;
      }
    }
    
    storeTheme(themeId) {
      try {
        localStorage.setItem('cv-theme', themeId);
      } catch (e) {
        console.warn('Could not save theme to localStorage');
      }
    }
    
    updateActiveButton() {
      const buttons = document.querySelectorAll('.theme-btn');
      buttons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.theme === this.currentTheme);
      });
    }
    
    // Public API
    getCurrentTheme() {
      return this.currentTheme;
    }
    
    getAvailableThemes() {
      return ['liquid-glass', 'zed'];
    }
  }
  
  // Initialize theme manager
  window.themeManager = new ThemeManager();
  
  // Expose for debugging
  if (typeof window !== 'undefined') {
    window.setTheme = (theme) => window.themeManager.setTheme(theme);
  }
</script>