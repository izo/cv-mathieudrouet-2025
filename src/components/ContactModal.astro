---
// Contact Modal Component with Netlify Forms support
---

<!-- Contact Modal -->
<div id="contact-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
    <!-- Modal Header -->
    <div class="flex justify-between items-center p-6 border-b border-gray-200">
      <h2 class="text-xl font-semibold text-gray-900">Me contacter</h2>
      <button 
        type="button" 
        id="close-modal" 
        class="text-gray-400 hover:text-gray-600 transition-colors"
        aria-label="Fermer la modale"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Modal Body -->
    <div class="p-6">
      <!-- Success Message (hidden by default) -->
      <div id="success-message" class="hidden mb-4 p-4 bg-green-50 border border-green-200 rounded-md">
        <div class="flex">
          <svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <div class="ml-3">
            <p class="text-sm font-medium text-green-800">Message envoyé avec succès !</p>
            <p class="text-sm text-green-700 mt-1">Je vous répondrai dans les plus brefs délais.</p>
          </div>
        </div>
      </div>

      <!-- Contact Form -->
      <form 
        id="contact-form"
        name="contact" 
        method="POST" 
        data-netlify="true" 
        data-netlify-honeypot="bot-field"
        class="space-y-4"
      >
        <!-- Netlify Forms -->
        <input type="hidden" name="form-name" value="contact" />
        
        <!-- Honeypot field for spam protection -->
        <div class="hidden">
          <label>Don't fill this out if you're human: <input name="bot-field" /></label>
        </div>

        <!-- Name Field -->
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
            Nom complet *
          </label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-cv-accent focus:border-cv-accent transition-colors"
            placeholder="Votre nom et prénom"
          />
        </div>

        <!-- Email Field -->
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
            Email *
          </label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-cv-accent focus:border-cv-accent transition-colors"
            placeholder="votre.email@exemple.com"
          />
        </div>

        <!-- Subject Field -->
        <div>
          <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">
            Sujet *
          </label>
          <input 
            type="text" 
            id="subject" 
            name="subject" 
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-cv-accent focus:border-cv-accent transition-colors"
            placeholder="Objet de votre message"
          />
        </div>

        <!-- Message Field -->
        <div>
          <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
            Message *
          </label>
          <textarea 
            id="message" 
            name="message" 
            rows="4" 
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-cv-accent focus:border-cv-accent transition-colors resize-vertical"
            placeholder="Votre message..."
          ></textarea>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-end space-x-3 pt-4">
          <button 
            type="button" 
            id="cancel-btn"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cv-accent transition-colors"
          >
            Annuler
          </button>
          <button 
            type="submit" 
            id="submit-btn"
            class="px-4 py-2 text-sm font-medium text-white bg-cv-accent border border-transparent rounded-md hover:bg-cv-accent/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cv-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="submit-text">Envoyer</span>
            <span id="submit-loading" class="hidden">
              <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Envoi...
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Contact Modal JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('contact-modal') as HTMLElement;
    const closeBtn = document.getElementById('close-modal') as HTMLButtonElement;
    const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitLoading = document.getElementById('submit-loading') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;

    // Declare global function for opening modal
    (window as any).openContactModal = function() {
      modal?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Focus first input
      setTimeout(() => {
        const nameInput = document.getElementById('name') as HTMLInputElement;
        nameInput?.focus();
      }, 100);
    };

    // Function to close modal
    function closeModal() {
      modal?.classList.add('hidden');
      document.body.style.overflow = '';
      
      // Reset form and messages
      form?.reset();
      successMessage?.classList.add('hidden');
      form?.classList.remove('hidden');
    }

    // Event listeners for closing modal
    closeBtn?.addEventListener('click', closeModal);
    cancelBtn?.addEventListener('click', closeModal);
    
    // Close on backdrop click
    modal?.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Form submission
    form?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      submitText?.classList.add('hidden');
      submitLoading?.classList.remove('hidden');

      try {
        // Create FormData
        const formData = new FormData(form);
        
        // Convert FormData to URLSearchParams for Netlify
        const params = new URLSearchParams();
        for (const [key, value] of formData.entries()) {
          params.append(key, value.toString());
        }
        
        // Submit to Netlify
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: params.toString()
        });

        if (response.ok) {
          // Show success message
          form?.classList.add('hidden');
          successMessage?.classList.remove('hidden');
          
          // Auto-close after 3 seconds
          setTimeout(() => {
            closeModal();
          }, 3000);
        } else {
          throw new Error('Network response was not ok');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Une erreur est survenue lors de l\'envoi du message. Veuillez réessayer.');
      } finally {
        // Reset loading state
        if (submitBtn) submitBtn.disabled = false;
        submitText?.classList.remove('hidden');
        submitLoading?.classList.add('hidden');
      }
    });
  });
</script>
