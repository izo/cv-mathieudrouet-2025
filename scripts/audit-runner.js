#!/usr/bin/env node

/**
 * Audit Runner Script
 * Runs comprehensive project audits and generates reports
 */

import { AuditSystem, formatAuditReport, exportAuditToJSON } from '../src/utils/auditSystem.js';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const projectRoot = join(__dirname, '..');
const auditOutputDir = join(projectRoot, 'audit-reports');

// Ensure audit output directory exists
if (!existsSync(auditOutputDir)) {
  mkdirSync(auditOutputDir, { recursive: true });
}

/**
 * Run audit with options
 */
async function runAudit(options = {}) {
  const {
    format = 'json',
    output = null,
    verbose = false,
    categories = null
  } = options;

  console.log('🔍 Starting comprehensive audit...');
  console.log(`📁 Project: ${projectRoot}`);
  console.log(`📊 Format: ${format}`);
  
  const auditSystem = new AuditSystem(projectRoot);
  
  try {
    const result = await auditSystem.runAudit();
    
    if (verbose) {
      console.log('\n📋 Audit Summary:');
      console.log(`Overall Score: ${result.overallScore}/100 (${result.overallGrade})`);
      console.log(`Categories: ${result.categories.length}`);
      console.log(`Recommendations: ${result.recommendations.length}`);
      console.log(`Risk Level: ${result.riskAssessment.overall}`);
    }
    
    // Generate output based on format
    let outputContent;
    let fileExtension;
    
    switch (format.toLowerCase()) {
      case 'json':
        outputContent = exportAuditToJSON(result);
        fileExtension = 'json';
        break;
      case 'markdown':
      case 'md':
        outputContent = formatAuditReport(result);
        fileExtension = 'md';
        break;
      case 'summary':
        outputContent = generateSummaryReport(result);
        fileExtension = 'txt';
        break;
      default:
        throw new Error(`Unsupported format: ${format}`);
    }
    
    // Write output
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = output || `audit-report-${timestamp}.${fileExtension}`;
    const filepath = join(auditOutputDir, filename);
    
    writeFileSync(filepath, outputContent, 'utf8');
    
    console.log(`✅ Audit completed successfully!`);
    console.log(`📄 Report saved to: ${filepath}`);
    
    // Print summary to console
    console.log('\n' + generateConsoleSummary(result));
    
    return result;
  } catch (error) {
    console.error('❌ Audit failed:', error.message);
    if (verbose) {
      console.error(error.stack);
    }
    process.exit(1);
  }
}

/**
 * Generate detailed summary report
 */
function generateSummaryReport(result) {
  const date = new Date(result.timestamp).toLocaleDateString();
  
  return `
AUDIT SUMMARY REPORT
===================

Date: ${date}
Overall Score: ${result.overallScore}/100 (${result.overallGrade})
Risk Level: ${result.riskAssessment.overall.toUpperCase()}

CATEGORY SCORES
--------------
${result.categories.map(cat => 
  `${cat.name.padEnd(20)} ${cat.score}/100 (${cat.grade}) - ${cat.status}`
).join('\n')}

TOP RECOMMENDATIONS
------------------
${result.recommendations.slice(0, 5).map((rec, i) => 
  `${i + 1}. ${rec.title} (${rec.priority} priority)
     Impact: ${rec.impact} | Effort: ${rec.effort} | ROI: ${rec.roi}
     ${rec.implementation}
`).join('\n')}

RISK ASSESSMENT
--------------
${result.riskAssessment.categories.map(risk => 
  `${risk.name}: ${risk.level.toUpperCase()}
  ${risk.description}
  Mitigation: ${risk.mitigation}
`).join('\n')}

TECHNICAL METRICS
----------------
Lines of Code: ${result.metrics.technical.linesOfCode.toLocaleString()}
Components: ${result.metrics.technical.components}
Dependencies: ${result.metrics.technical.dependencies}
Bundle Size (CSS): ${result.metrics.technical.bundleSizeCSS}KB
Build Time: ${result.metrics.technical.buildTime}s
Test Coverage: ${result.metrics.technical.testCoverage}%

QUALITY METRICS
--------------
TypeScript Coverage: ${result.metrics.quality.typescriptCoverage}%
ESLint Issues: ${result.metrics.quality.eslintIssues}
Security Vulnerabilities: ${result.metrics.quality.securityVulnerabilities}
Accessibility Score: ${result.metrics.quality.accessibilityScore}%
Performance Score: ${result.metrics.quality.performanceScore}%

BUSINESS METRICS
---------------
Page Load Time: ${result.metrics.business.pageLoadTime}s
Core Web Vitals:
  - LCP: ${result.metrics.business.coreWebVitals.lcp}s
  - FID: ${result.metrics.business.coreWebVitals.fid}ms
  - CLS: ${result.metrics.business.coreWebVitals.cls}
  - TTFB: ${result.metrics.business.coreWebVitals.ttfb}ms
  - FCP: ${result.metrics.business.coreWebVitals.fcp}s
SEO Score: ${result.metrics.business.seoScore}%
Mobile Friendliness: ${result.metrics.business.mobileFriendliness}%
Cross-browser Compatibility: ${result.metrics.business.crossBrowserCompatibility}%

Generated by CV Audit System v${result.version}
`;
}

/**
 * Generate console summary
 */
function generateConsoleSummary(result) {
  const gradeEmoji = {
    'A+': '🌟',
    'A': '⭐',
    'A-': '✨',
    'B+': '👍',
    'B': '👌',
    'B-': '🆗',
    'C+': '⚠️',
    'C': '🔶',
    'F': '❌'
  };
  
  return `
┌─────────────────────────────────────────────────────────────┐
│                    AUDIT SUMMARY                            │
├─────────────────────────────────────────────────────────────┤
│ Overall Score: ${result.overallScore}/100 (${result.overallGrade}) ${gradeEmoji[result.overallGrade] || ''}               │
│ Risk Level: ${result.riskAssessment.overall.toUpperCase().padEnd(10)}                                  │
│ Categories: ${result.categories.length}                                              │
│ Recommendations: ${result.recommendations.length}                                      │
├─────────────────────────────────────────────────────────────┤
│ CATEGORY BREAKDOWN                                          │
├─────────────────────────────────────────────────────────────┤
${result.categories.map(cat => 
  `│ ${cat.name.padEnd(15)} ${cat.score}/100 (${cat.grade}) ${cat.status.padEnd(10)} │`
).join('\n')}
├─────────────────────────────────────────────────────────────┤
│ TOP RECOMMENDATIONS                                         │
├─────────────────────────────────────────────────────────────┤
${result.recommendations.slice(0, 3).map((rec, i) => 
  `│ ${(i + 1)}. ${rec.title.padEnd(45)} (${rec.priority}) │`
).join('\n')}
└─────────────────────────────────────────────────────────────┘
`;
}

/**
 * Watch mode for continuous auditing
 */
async function watchMode() {
  console.log('👀 Starting audit watch mode...');
  
  const runWatchedAudit = async () => {
    try {
      const result = await runAudit({ format: 'json', verbose: false });
      console.log(`⏰ ${new Date().toLocaleTimeString()} - Audit completed (${result.overallScore}/100)`);
    } catch (error) {
      console.error(`⏰ ${new Date().toLocaleTimeString()} - Audit failed:`, error.message);
    }
  };
  
  // Run initial audit
  await runWatchedAudit();
  
  // Run audit every 5 minutes
  setInterval(runWatchedAudit, 5 * 60 * 1000);
}

/**
 * Schedule audit (for CI/CD)
 */
async function scheduleAudit() {
  console.log('📅 Running scheduled audit...');
  
  const result = await runAudit({ 
    format: 'json', 
    verbose: true,
    output: 'scheduled-audit.json'
  });
  
  // Check if audit passes quality gates
  const qualityGates = {
    overallScore: 80,
    securityScore: 85,
    performanceScore: 90,
    accessibilityScore: 90
  };
  
  const securityCategory = result.categories.find(cat => cat.name === 'Security');
  const performanceCategory = result.categories.find(cat => cat.name === 'Performance');
  const accessibilityCategory = result.categories.find(cat => cat.name === 'Accessibility');
  
  const gatesPassed = {
    overall: result.overallScore >= qualityGates.overallScore,
    security: securityCategory?.score >= qualityGates.securityScore,
    performance: performanceCategory?.score >= qualityGates.performanceScore,
    accessibility: accessibilityCategory?.score >= qualityGates.accessibilityScore
  };
  
  const allGatesPassed = Object.values(gatesPassed).every(Boolean);
  
  console.log('\n🚪 Quality Gates:');
  console.log(`Overall (${result.overallScore}/100): ${gatesPassed.overall ? '✅ PASS' : '❌ FAIL'}`);
  console.log(`Security (${securityCategory?.score}/100): ${gatesPassed.security ? '✅ PASS' : '❌ FAIL'}`);
  console.log(`Performance (${performanceCategory?.score}/100): ${gatesPassed.performance ? '✅ PASS' : '❌ FAIL'}`);
  console.log(`Accessibility (${accessibilityCategory?.score}/100): ${gatesPassed.accessibility ? '✅ PASS' : '❌ FAIL'}`);
  
  if (!allGatesPassed) {
    console.log('\n❌ Quality gates failed. Review audit report for details.');
    process.exit(1);
  }
  
  console.log('\n✅ All quality gates passed!');
  return result;
}

/**
 * CLI Interface
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  // Parse flags
  const options = {
    format: 'json',
    output: null,
    verbose: false,
    categories: null
  };
  
  for (let i = 1; i < args.length; i++) {
    const arg = args[i];
    
    if (arg === '--format' || arg === '-f') {
      options.format = args[++i];
    } else if (arg === '--output' || arg === '-o') {
      options.output = args[++i];
    } else if (arg === '--verbose' || arg === '-v') {
      options.verbose = true;
    } else if (arg === '--categories' || arg === '-c') {
      options.categories = args[++i]?.split(',');
    }
  }
  
  switch (command) {
    case 'run':
      await runAudit(options);
      break;
      
    case 'watch':
      await watchMode();
      break;
      
    case 'schedule':
      await scheduleAudit();
      break;
      
    case 'help':
    case '--help':
    case '-h':
      console.log(`
CV Audit Runner

Usage:
  node scripts/audit-runner.js <command> [options]

Commands:
  run         Run audit once
  watch       Run audit continuously
  schedule    Run audit with quality gates (for CI/CD)
  help        Show this help message

Options:
  --format, -f <format>     Output format (json, markdown, summary)
  --output, -o <filename>   Output filename
  --verbose, -v             Verbose output
  --categories, -c <list>   Comma-separated list of categories to audit

Examples:
  node scripts/audit-runner.js run --format markdown --output report.md
  node scripts/audit-runner.js schedule --verbose
  node scripts/audit-runner.js watch
      `);
      break;
      
    default:
      console.error(`Unknown command: ${command}`);
      console.log('Use "node scripts/audit-runner.js help" for usage information.');
      process.exit(1);
  }
}

// Run CLI if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { runAudit, watchMode, scheduleAudit };